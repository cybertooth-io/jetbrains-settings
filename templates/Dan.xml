<templateSet group="Dan">
  <template name="t(" value="&lt;%= t('$END$') -%&gt;" description="I18n.t() for ERB" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="RHTML" value="true" />
    </context>
  </template>
  <template name="com" value="&lt;%# $end$ -%&gt;" description="&lt;%# comment %&gt;" toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="RHTML" value="true" />
    </context>
  </template>
  <template name="debug" value="console.debug($END$);" description="Ember logger debug-level." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="info" value="console.info($END$);" description="Ember logger info-level." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="warn" value="console.warn($END$);" description="Ember logger warn-level." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="error" value="console.error($END$);" description="Ember logger error-level." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="safe" value="Ember.String.htmlSafe($end$)" description="Ember.String.htmlSafe(...) stub" toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="sep" value="# --------------------------------------------------------------------------------------------------------$end$" description="Ruby separator comment" toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="RUBY" value="true" />
    </context>
  </template>
  <template name="i18n" value="i18n: Ember.inject.service()," description="Inject i18n into a component or route's js." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
    </context>
  </template>
  <template name="wait" value="return wait().then(() =&gt; {$end$});&#10;" description="In Ember tests create a wait block for an async call." toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="run" value="Ember.run(() =&gt;{&#10;  $end$&#10;});" description="Create an Ember.run(() =&gt; {}) block." toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="curr" value="current: Ember.inject.service()," description="Adding the `current` service to a route/component." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="cu" value="/**&#10; * The currentUser service; injected explicitly for runtime and integration tests.&#10; */&#10;currentUser: Ember.inject.service('currentUser')," description="Adding the currentUser to my component." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="filter" value="filter(&#10;  :$name$,&#10;  verify: lambda do |values, _context|&#10;   #raise JSONAPI::Exceptions::InvalidFilterValue.new(:$name$, nil) unless values.first.present?&#10;  end,&#10;  apply: lambda do |records, value, _options|&#10;   $end$&#10;  end&#10;)" description="Create a JSONAPI filter" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="RUBY" value="true" />
    </context>
  </template>
  <template name="eq" value="assert.equal($actual$, $expected$);" description="Ember Test assert.equal(...)" toReformat="false" toShortenFQNames="true">
    <variable name="actual" expression="" defaultValue="'actual'" alwaysStopAt="true" />
    <variable name="expected" expression="" defaultValue="'expected'" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ok" value="assert.$ok$($actual$);" description="Ember Test assert.ok(...)" toReformat="true" toShortenFQNames="true">
    <variable name="actual" expression="" defaultValue="true" alwaysStopAt="true" />
    <variable name="ok" expression="complete()" defaultValue="&quot;ok&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="smirage" value="startMirage(this.container);" description="The start of mirage inside the beforeEach() block of an Ember unit test." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="imirage" value="import { startMirage } from 'valet/initializers/ember-cli-mirage';" description="Import mirage inside an Ember unit test." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="iember" value="import Ember from 'ember';" description="Import Ember." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="iwait" value="import wait from 'ember-test-helpers/wait';" description="Import the Ember wait helper inside an Ember unit test." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="iskip" value="import { skip } from 'qunit';" description="Import the QUnit wait helper inside an Ember unit test." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jshint" value="// jshint ignore:line" description="A javascript comment with: jshint ignore:line" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="store" value="store: Ember.inject.service()," description="Inject store into a component or route's js." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
    </context>
  </template>
  <template name="service" value="this.register('service:$type$', Ember.Service.extend({$end$}));&#10;this.inject.service('$type$');&#10;" description="Insert a service stub for unit tests." toReformat="true" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="before" value="beforeEach() {&#10;  this.register('service:current', Ember.Service.extend({ systemTimezone: moment.tz.guess() }));&#10;  this.inject.service('current');&#10;}" description="Ember test `beforeEach` block including the current service." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
    </context>
  </template>
  <template name="ihelpers" value="import StringHelpers from 'valet/tests/helpers/string-helpers';" description="Import our Valet's custom StringHelpers class." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fg" value="{{#twbs-form-group fieldErrors=$field_errors$}}&#10;$end$&#10;{{/twbs-form-group}}&#10;" description="{{twbs-form-group}}" toReformat="true" toShortenFQNames="true">
    <variable name="field_errors" expression="" defaultValue="model.errors.fieldName" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Handlebars" value="true" />
    </context>
  </template>
  <template name="destroy-old" value="destroy$modelCamelCased$($model$) {&#10;  const i18n = this.get('i18n');&#10;  if (confirm(i18n.t('models.$model$.confirm.destroy'))) {&#10;    $model$.destroyRecord()&#10;      .then((/*$model$Destroyed*/) =&gt; {&#10;        this.transitionTo('$success$')&#10;          .then((newRoute) =&gt; {&#10;            newRoute.get('notify')&#10;              .success(i18n.t('templates.common.notify.success.destroy', {&#10;                name: i18n.t('models.$model$.one')&#10;              }));&#10;          });&#10;      })&#10;      .catch((/*errors*/) =&gt; {&#10;        $model$.rollbackAttributes();&#10;        this.get('notify')&#10;          .error(i18n.t('templates.common.notify.error.destroy', {&#10;            name: i18n.t('models.$model$.one')&#10;          }));&#10;      });&#10;  }&#10;  return true;&#10;},&#10;" description="The boilerplate destroy action." toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="success" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="modelCamelCased" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="create" value="create$modelCamelCased$($model$) {&#10;  const i18n = this.get('i18n');&#10;  $model$.save()&#10;    .then((/*$model$Saved*/) =&gt; {&#10;      this.transitionTo('$success$')&#10;        .then((newRoute) =&gt; {&#10;          newRoute.get('notify')&#10;            .success(i18n.t('templates.common.notify.success.create', {&#10;              name: i18n.t('models.$model$.one')&#10;            }));&#10;        });&#10;    })&#10;    .catch((/*errors*/) =&gt; {&#10;      this.get('notify')&#10;        .error(i18n.t('templates.common.notify.error.create', {&#10;          name: i18n.t('models.$model$.one')&#10;        }));&#10;    });&#10;  return true;&#10;},&#10;" description="The boilerplate create action." toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="success" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="modelCamelCased" expression="" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="update" value="update$modelCamelCased$($model$) {&#10;  const i18n = this.get('i18n');&#10;  $model$.save()&#10;    .then((/*$model$Saved*/) =&gt; {&#10;      this.transitionTo('$success$')&#10;        .then((newRoute) =&gt; {&#10;          newRoute.get('notify')&#10;            .success(i18n.t('templates.common.notify.success.update', {&#10;              name: i18n.t('models.$model$.one')&#10;            }));&#10;        });&#10;    })&#10;    .catch((/*errors*/) =&gt; {&#10;      this.get('notify')&#10;        .error(i18n.t('templates.common.notify.error.update', {&#10;          name: i18n.t('models.$model$.one')&#10;        }));&#10;    });&#10;  return true;&#10;},&#10;" description="The boilerplate update action." toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="success" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <variable name="modelCamelCased" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="itran" value="import { translationMacro as t } from 'ember-i18n';" description="Import the Ember `t` macro inside an Ember class." toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="save" value="save(model, $model$) {&#10;  const i18n = this.get('i18n');&#10;  bed.save()&#10;    .then((/*$model$Saved*/) =&gt; {&#10;      this.get('notify')&#10;        .success(i18n.t('templates.common.notify.success.save', {&#10;          name: i18n.t('models.$model$.one')&#10;        }));$end$&#10;    })&#10;    .catch((/*errors*/) =&gt; {&#10;      this.get('notify')&#10;        .error(i18n.t('templates.common.notify.error.save', {&#10;          name: i18n.t('models.$model$.one')&#10;        }));&#10;    });&#10;  return true;&#10;},&#10;" description="The boilerplate save action." toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="destroy" value="destroy(model, $model$) {&#10;  const i18n = this.get('i18n');&#10;  if (confirm(i18n.t('models.$model$.confirm.destroy', { $model$: $model$ }))) {&#10;    bed.destroyRecord()&#10;      .then((/*$model$Saved*/) =&gt; {&#10;        this.get('notify')&#10;          .success(i18n.t('templates.common.notify.success.destroy', {&#10;            name: i18n.t('models.$model$.one')&#10;          }));$end$&#10;      })&#10;      .catch((/*errors*/) =&gt; {&#10;        this.get('notify')&#10;          .error(i18n.t('templates.common.notify.error.destroy', {&#10;            name: i18n.t('models.$model$.one')&#10;          }));&#10;      });&#10;  }&#10;  return true;&#10;},&#10;" description="The boilerplate destroy action." toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="paramsFor" value="const params = this.paramsFor($route$);" description="Get the params for a particular route." toReformat="false" toShortenFQNames="true">
    <variable name="route" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="modelFor" value="const $end$ = this.modelFor($route$);" description="Use modelFor to grab an instance from the route." toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="route" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name=".then" value=".then((/*response*/) =&gt; {&#10;  this.get('notify')&#10;    .success(this.get('i18n').t('templates.common.notify.success.$operation$', {&#10;      name: this.get('i18n').t('models.$model$.one')&#10;    }));&#10;})&#10;.catch((/*errors*/) =&gt; {&#10;  this.get('notify')&#10;    .error(this.get('i18n').t('templates.common.notify.error.$operation$', {&#10;      name: this.get('i18n').t('models.$model$.one')&#10;    }));&#10;});" description="The standard then." toReformat="false" toShortenFQNames="true">
    <variable name="operation" expression="enum(&quot;create&quot;, &quot;destroy&quot;, &quot;save&quot;, &quot;update&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rev" value="reversible do |dir|&#10;  dir.up do&#10;    $end$&#10;  end&#10;  dir.down do&#10;  end&#10;end" description="Rails migration reversible" toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="RUBY_CODE" value="true" />
    </context>
  </template>
  <template name="rubod" value="# rubocop:disable $end$" description="Disable Cop" toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="RUBY_CODE" value="true" />
      <option name="RUBY_COMMENTS" value="true" />
    </context>
  </template>
  <template name="ruboe" value="# rubocop:enable $end$" description="Enable Cop" toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="RUBY_CODE" value="true" />
      <option name="RUBY_COMMENTS" value="true" />
    </context>
  </template>
  <template name="911" value="new Date('2001-09-11T14:46:00Z')$end$" description="New Date On September 11" toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>